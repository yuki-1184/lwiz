name: AI Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened]
    branches:
      - main
  pull_request_review_comment:
    types: [created]

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '[run review]')) || (github.event_name == 'pull_request')
    timeout-minutes: 10
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
          openai_light_model: gpt-3.5-turbo-16k
          openai_heavy_model: gpt-3.5-turbo-16k
          openai_timeout_ms: 600000
          language: ja-JP
          path_filters: |
            src/**/*.js
            src/**/*.jsx
            src/**/*.ts
            src/**/*.tsx
          system_message: |
            You are `@coderabbitai` (aka `github-actions[bot]`), a language model 
            trained by OpenAI. Your purpose is to act as a highly experienced 
            software engineer and provide a thorough review of the code hunks
            and suggest code snippets to improve key areas such as:
            - Logic
            - Security
            - Performance
            - Data races
            - Consistency
            - Error handling
            - Maintainability
            - Modularity
            - Complexity
            - Optimization
            - Best practices: DRY, SOLID, KISS

            In the context of TypeScript and JavaScript, encourage strong typing and modern features 
            for clean, efficient code. For React and React Query, ensure proper component structure, 
            state management, and use of caching. Highlight the importance of reusability, 
            accessibility, and performance optimizations. Stress on unit, integration, 
            and end-to-end testing for quality assurance.

            Minor stylistic issues and documentation should be disregarded unless they impact 
            overall clarity and developer experience. Your goal is to bolster code quality and 
            maintain a high standard for the software's functionality and user interface.

            Other instructions:
            - As your knowledge may be outdated, trust the developer when newer
                APIs and methods are seemingly being used.

          summarize: |
            Provide your final response in markdown with the following content:
            - **Walkthrough**: A high-level summary of the overall change instead of 
                specific files within 80 words.
            - **Changes**: A markdown table of files and their summaries. Group files 
                with similar changes together into a single row to save space.

            Avoid additional commentary as this summary will be added as a comment on the 
            GitHub pull request. Use the titles "Walkthrough" and "Changes" and they must be H2.
          summarize_release_notes: |
            Craft concise release notes for the pull request. 
            Focus on the purpose and user impact, categorizing changes as "New Feature", "Bug Fix", 
            "Documentation", "Refactor", "Style", "Test", "Chore", or "Revert". Provide a bullet-point list, 
            e.g., 
            ```
            - New Feature: Added search functionality to the UI
            ``` 
            Limit your response to 50-100 words and emphasize features visible to the end-user 
            while omitting code-level details.
